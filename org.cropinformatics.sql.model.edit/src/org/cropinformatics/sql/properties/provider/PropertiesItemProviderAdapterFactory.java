/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.cropinformatics.sql.properties.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.cropinformatics.sql.properties.util.PropertiesAdapterFactory;
import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PropertiesItemProviderAdapterFactory extends PropertiesAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PropertiesItemProviderAdapterFactory()
	{
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.cropinformatics.sql.properties.DatabaseAlias} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatabaseAliasItemProvider databaseAliasItemProvider;

	/**
	 * This creates an adapter for a {@link org.cropinformatics.sql.properties.DatabaseAlias}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatabaseAliasAdapter()
	{
		if (databaseAliasItemProvider == null)
		{
			databaseAliasItemProvider = new DatabaseAliasItemProvider(this);
		}

		return databaseAliasItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.cropinformatics.sql.properties.DatabaseProperties} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatabasePropertiesItemProvider databasePropertiesItemProvider;

	/**
	 * This creates an adapter for a {@link org.cropinformatics.sql.properties.DatabaseProperties}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatabasePropertiesAdapter()
	{
		if (databasePropertiesItemProvider == null)
		{
			databasePropertiesItemProvider = new DatabasePropertiesItemProvider(this);
		}

		return databasePropertiesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.cropinformatics.sql.properties.DatabasePropertiesListType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatabasePropertiesListTypeItemProvider databasePropertiesListTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.cropinformatics.sql.properties.DatabasePropertiesListType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatabasePropertiesListTypeAdapter()
	{
		if (databasePropertiesListTypeItemProvider == null)
		{
			databasePropertiesListTypeItemProvider = new DatabasePropertiesListTypeItemProvider(this);
		}

		return databasePropertiesListTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.cropinformatics.sql.properties.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link org.cropinformatics.sql.properties.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter()
	{
		if (documentRootItemProvider == null)
		{
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.cropinformatics.sql.properties.Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyItemProvider propertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.cropinformatics.sql.properties.Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyAdapter()
	{
		if (propertyItemProvider == null)
		{
			propertyItemProvider = new PropertyItemProvider(this);
		}

		return propertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.cropinformatics.sql.properties.SpecificDBMSProperties} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpecificDBMSPropertiesItemProvider specificDBMSPropertiesItemProvider;

	/**
	 * This creates an adapter for a {@link org.cropinformatics.sql.properties.SpecificDBMSProperties}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSpecificDBMSPropertiesAdapter()
	{
		if (specificDBMSPropertiesItemProvider == null)
		{
			specificDBMSPropertiesItemProvider = new SpecificDBMSPropertiesItemProvider(this);
		}

		return specificDBMSPropertiesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.cropinformatics.sql.properties.Sql} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SqlItemProvider sqlItemProvider;

	/**
	 * This creates an adapter for a {@link org.cropinformatics.sql.properties.Sql}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSqlAdapter()
	{
		if (sqlItemProvider == null)
		{
			sqlItemProvider = new SqlItemProvider(this);
		}

		return sqlItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.cropinformatics.sql.properties.SqlFile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SqlFileItemProvider sqlFileItemProvider;

	/**
	 * This creates an adapter for a {@link org.cropinformatics.sql.properties.SqlFile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSqlFileAdapter()
	{
		if (sqlFileItemProvider == null)
		{
			sqlFileItemProvider = new SqlFileItemProvider(this);
		}

		return sqlFileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.cropinformatics.sql.properties.SqlGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SqlGroupItemProvider sqlGroupItemProvider;

	/**
	 * This creates an adapter for a {@link org.cropinformatics.sql.properties.SqlGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSqlGroupAdapter()
	{
		if (sqlGroupItemProvider == null)
		{
			sqlGroupItemProvider = new SqlGroupItemProvider(this);
		}

		return sqlGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.cropinformatics.sql.properties.SqlParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SqlParameterItemProvider sqlParameterItemProvider;

	/**
	 * This creates an adapter for a {@link org.cropinformatics.sql.properties.SqlParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSqlParameterAdapter()
	{
		if (sqlParameterItemProvider == null)
		{
			sqlParameterItemProvider = new SqlParameterItemProvider(this);
		}

		return sqlParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.cropinformatics.sql.properties.SqlProperties} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SqlPropertiesItemProvider sqlPropertiesItemProvider;

	/**
	 * This creates an adapter for a {@link org.cropinformatics.sql.properties.SqlProperties}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSqlPropertiesAdapter()
	{
		if (sqlPropertiesItemProvider == null)
		{
			sqlPropertiesItemProvider = new SqlPropertiesItemProvider(this);
		}

		return sqlPropertiesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.cropinformatics.sql.properties.SqlQuery} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SqlQueryItemProvider sqlQueryItemProvider;

	/**
	 * This creates an adapter for a {@link org.cropinformatics.sql.properties.SqlQuery}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSqlQueryAdapter()
	{
		if (sqlQueryItemProvider == null)
		{
			sqlQueryItemProvider = new SqlQueryItemProvider(this);
		}

		return sqlQueryItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory()
	{
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
	{
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type)
	{
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type)
	{
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type)
	{
		if (isFactoryForType(type))
		{
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
			{
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener)
	{
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener)
	{
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification)
	{
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null)
		{
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose()
	{
		if (databaseAliasItemProvider != null) databaseAliasItemProvider.dispose();
		if (databasePropertiesItemProvider != null) databasePropertiesItemProvider.dispose();
		if (databasePropertiesListTypeItemProvider != null) databasePropertiesListTypeItemProvider.dispose();
		if (documentRootItemProvider != null) documentRootItemProvider.dispose();
		if (propertyItemProvider != null) propertyItemProvider.dispose();
		if (specificDBMSPropertiesItemProvider != null) specificDBMSPropertiesItemProvider.dispose();
		if (sqlItemProvider != null) sqlItemProvider.dispose();
		if (sqlFileItemProvider != null) sqlFileItemProvider.dispose();
		if (sqlGroupItemProvider != null) sqlGroupItemProvider.dispose();
		if (sqlParameterItemProvider != null) sqlParameterItemProvider.dispose();
		if (sqlPropertiesItemProvider != null) sqlPropertiesItemProvider.dispose();
		if (sqlQueryItemProvider != null) sqlQueryItemProvider.dispose();
	}

}
