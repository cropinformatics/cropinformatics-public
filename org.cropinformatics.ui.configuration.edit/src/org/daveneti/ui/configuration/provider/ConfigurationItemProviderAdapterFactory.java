/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.daveneti.ui.configuration.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.daveneti.ui.configuration.util.ConfigurationAdapterFactory;
import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ConfigurationItemProviderAdapterFactory extends ConfigurationAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ConfigurationItemProviderAdapterFactory()
	{
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.daveneti.ui.configuration.Colour} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColourItemProvider colourItemProvider;

	/**
	 * This creates an adapter for a {@link org.daveneti.ui.configuration.Colour}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColourAdapter()
	{
		if (colourItemProvider == null)
		{
			colourItemProvider = new ColourItemProvider(this);
		}

		return colourItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.daveneti.ui.configuration.ComponentConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentConfigurationItemProvider componentConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link org.daveneti.ui.configuration.ComponentConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentConfigurationAdapter()
	{
		if (componentConfigurationItemProvider == null)
		{
			componentConfigurationItemProvider = new ComponentConfigurationItemProvider(this);
		}

		return componentConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.daveneti.ui.configuration.Configuration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigurationItemProvider configurationItemProvider;

	/**
	 * This creates an adapter for a {@link org.daveneti.ui.configuration.Configuration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigurationAdapter()
	{
		if (configurationItemProvider == null)
		{
			configurationItemProvider = new ConfigurationItemProvider(this);
		}

		return configurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.daveneti.ui.configuration.ConfigurationListType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigurationListTypeItemProvider configurationListTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.daveneti.ui.configuration.ConfigurationListType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigurationListTypeAdapter()
	{
		if (configurationListTypeItemProvider == null)
		{
			configurationListTypeItemProvider = new ConfigurationListTypeItemProvider(this);
		}

		return configurationListTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.daveneti.ui.configuration.ContainerConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContainerConfigurationItemProvider containerConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link org.daveneti.ui.configuration.ContainerConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContainerConfigurationAdapter()
	{
		if (containerConfigurationItemProvider == null)
		{
			containerConfigurationItemProvider = new ContainerConfigurationItemProvider(this);
		}

		return containerConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.daveneti.ui.configuration.ControlConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlConfigurationItemProvider controlConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link org.daveneti.ui.configuration.ControlConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlConfigurationAdapter()
	{
		if (controlConfigurationItemProvider == null)
		{
			controlConfigurationItemProvider = new ControlConfigurationItemProvider(this);
		}

		return controlConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.daveneti.ui.configuration.ControlPathElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlPathElementItemProvider controlPathElementItemProvider;

	/**
	 * This creates an adapter for a {@link org.daveneti.ui.configuration.ControlPathElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlPathElementAdapter()
	{
		if (controlPathElementItemProvider == null)
		{
			controlPathElementItemProvider = new ControlPathElementItemProvider(this);
		}

		return controlPathElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.daveneti.ui.configuration.CTabFolderConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CTabFolderConfigurationItemProvider cTabFolderConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link org.daveneti.ui.configuration.CTabFolderConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCTabFolderConfigurationAdapter()
	{
		if (cTabFolderConfigurationItemProvider == null)
		{
			cTabFolderConfigurationItemProvider = new CTabFolderConfigurationItemProvider(this);
		}

		return cTabFolderConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.daveneti.ui.configuration.DialogConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DialogConfigurationItemProvider dialogConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link org.daveneti.ui.configuration.DialogConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDialogConfigurationAdapter()
	{
		if (dialogConfigurationItemProvider == null)
		{
			dialogConfigurationItemProvider = new DialogConfigurationItemProvider(this);
		}

		return dialogConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.daveneti.ui.configuration.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link org.daveneti.ui.configuration.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter()
	{
		if (documentRootItemProvider == null)
		{
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.daveneti.ui.configuration.EditorConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EditorConfigurationItemProvider editorConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link org.daveneti.ui.configuration.EditorConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEditorConfigurationAdapter()
	{
		if (editorConfigurationItemProvider == null)
		{
			editorConfigurationItemProvider = new EditorConfigurationItemProvider(this);
		}

		return editorConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.daveneti.ui.configuration.ExpandBarConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpandBarConfigurationItemProvider expandBarConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link org.daveneti.ui.configuration.ExpandBarConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpandBarConfigurationAdapter()
	{
		if (expandBarConfigurationItemProvider == null)
		{
			expandBarConfigurationItemProvider = new ExpandBarConfigurationItemProvider(this);
		}

		return expandBarConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.daveneti.ui.configuration.Image} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImageItemProvider imageItemProvider;

	/**
	 * This creates an adapter for a {@link org.daveneti.ui.configuration.Image}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImageAdapter()
	{
		if (imageItemProvider == null)
		{
			imageItemProvider = new ImageItemProvider(this);
		}

		return imageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.daveneti.ui.configuration.Label} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LabelItemProvider labelItemProvider;

	/**
	 * This creates an adapter for a {@link org.daveneti.ui.configuration.Label}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLabelAdapter()
	{
		if (labelItemProvider == null)
		{
			labelItemProvider = new LabelItemProvider(this);
		}

		return labelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.daveneti.ui.configuration.Layout} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LayoutItemProvider layoutItemProvider;

	/**
	 * This creates an adapter for a {@link org.daveneti.ui.configuration.Layout}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLayoutAdapter()
	{
		if (layoutItemProvider == null)
		{
			layoutItemProvider = new LayoutItemProvider(this);
		}

		return layoutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.daveneti.ui.configuration.LayoutData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LayoutDataItemProvider layoutDataItemProvider;

	/**
	 * This creates an adapter for a {@link org.daveneti.ui.configuration.LayoutData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLayoutDataAdapter()
	{
		if (layoutDataItemProvider == null)
		{
			layoutDataItemProvider = new LayoutDataItemProvider(this);
		}

		return layoutDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.daveneti.ui.configuration.ListViewerConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ListViewerConfigurationItemProvider listViewerConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link org.daveneti.ui.configuration.ListViewerConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createListViewerConfigurationAdapter()
	{
		if (listViewerConfigurationItemProvider == null)
		{
			listViewerConfigurationItemProvider = new ListViewerConfigurationItemProvider(this);
		}

		return listViewerConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.daveneti.ui.configuration.MappingViewerConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MappingViewerConfigurationItemProvider mappingViewerConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link org.daveneti.ui.configuration.MappingViewerConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMappingViewerConfigurationAdapter()
	{
		if (mappingViewerConfigurationItemProvider == null)
		{
			mappingViewerConfigurationItemProvider = new MappingViewerConfigurationItemProvider(this);
		}

		return mappingViewerConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.daveneti.ui.configuration.MatrixViewerConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MatrixViewerConfigurationItemProvider matrixViewerConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link org.daveneti.ui.configuration.MatrixViewerConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMatrixViewerConfigurationAdapter()
	{
		if (matrixViewerConfigurationItemProvider == null)
		{
			matrixViewerConfigurationItemProvider = new MatrixViewerConfigurationItemProvider(this);
		}

		return matrixViewerConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.daveneti.ui.configuration.MultipleListViewerConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultipleListViewerConfigurationItemProvider multipleListViewerConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link org.daveneti.ui.configuration.MultipleListViewerConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultipleListViewerConfigurationAdapter()
	{
		if (multipleListViewerConfigurationItemProvider == null)
		{
			multipleListViewerConfigurationItemProvider = new MultipleListViewerConfigurationItemProvider(this);
		}

		return multipleListViewerConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.daveneti.ui.configuration.PagePathElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PagePathElementItemProvider pagePathElementItemProvider;

	/**
	 * This creates an adapter for a {@link org.daveneti.ui.configuration.PagePathElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPagePathElementAdapter()
	{
		if (pagePathElementItemProvider == null)
		{
			pagePathElementItemProvider = new PagePathElementItemProvider(this);
		}

		return pagePathElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.daveneti.ui.configuration.PartConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PartConfigurationItemProvider partConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link org.daveneti.ui.configuration.PartConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPartConfigurationAdapter()
	{
		if (partConfigurationItemProvider == null)
		{
			partConfigurationItemProvider = new PartConfigurationItemProvider(this);
		}

		return partConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.daveneti.ui.configuration.PerspectiveConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PerspectiveConfigurationItemProvider perspectiveConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link org.daveneti.ui.configuration.PerspectiveConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPerspectiveConfigurationAdapter()
	{
		if (perspectiveConfigurationItemProvider == null)
		{
			perspectiveConfigurationItemProvider = new PerspectiveConfigurationItemProvider(this);
		}

		return perspectiveConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.daveneti.ui.configuration.QueryResultViewerConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QueryResultViewerConfigurationItemProvider queryResultViewerConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link org.daveneti.ui.configuration.QueryResultViewerConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQueryResultViewerConfigurationAdapter()
	{
		if (queryResultViewerConfigurationItemProvider == null)
		{
			queryResultViewerConfigurationItemProvider = new QueryResultViewerConfigurationItemProvider(this);
		}

		return queryResultViewerConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.daveneti.ui.configuration.SubPath} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubPathItemProvider subPathItemProvider;

	/**
	 * This creates an adapter for a {@link org.daveneti.ui.configuration.SubPath}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubPathAdapter()
	{
		if (subPathItemProvider == null)
		{
			subPathItemProvider = new SubPathItemProvider(this);
		}

		return subPathItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.daveneti.ui.configuration.TabFolderConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TabFolderConfigurationItemProvider tabFolderConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link org.daveneti.ui.configuration.TabFolderConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTabFolderConfigurationAdapter()
	{
		if (tabFolderConfigurationItemProvider == null)
		{
			tabFolderConfigurationItemProvider = new TabFolderConfigurationItemProvider(this);
		}

		return tabFolderConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.daveneti.ui.configuration.TwinViewerConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TwinViewerConfigurationItemProvider twinViewerConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link org.daveneti.ui.configuration.TwinViewerConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTwinViewerConfigurationAdapter()
	{
		if (twinViewerConfigurationItemProvider == null)
		{
			twinViewerConfigurationItemProvider = new TwinViewerConfigurationItemProvider(this);
		}

		return twinViewerConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.daveneti.ui.configuration.ViewConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ViewConfigurationItemProvider viewConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link org.daveneti.ui.configuration.ViewConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createViewConfigurationAdapter()
	{
		if (viewConfigurationItemProvider == null)
		{
			viewConfigurationItemProvider = new ViewConfigurationItemProvider(this);
		}

		return viewConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.daveneti.ui.configuration.ViewerConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ViewerConfigurationItemProvider viewerConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link org.daveneti.ui.configuration.ViewerConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createViewerConfigurationAdapter()
	{
		if (viewerConfigurationItemProvider == null)
		{
			viewerConfigurationItemProvider = new ViewerConfigurationItemProvider(this);
		}

		return viewerConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.daveneti.ui.configuration.WizardConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WizardConfigurationItemProvider wizardConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link org.daveneti.ui.configuration.WizardConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWizardConfigurationAdapter()
	{
		if (wizardConfigurationItemProvider == null)
		{
			wizardConfigurationItemProvider = new WizardConfigurationItemProvider(this);
		}

		return wizardConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.daveneti.ui.configuration.WizardPageConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WizardPageConfigurationItemProvider wizardPageConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link org.daveneti.ui.configuration.WizardPageConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWizardPageConfigurationAdapter()
	{
		if (wizardPageConfigurationItemProvider == null)
		{
			wizardPageConfigurationItemProvider = new WizardPageConfigurationItemProvider(this);
		}

		return wizardPageConfigurationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory()
	{
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
	{
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type)
	{
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type)
	{
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type)
	{
		if (isFactoryForType(type))
		{
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
			{
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener)
	{
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener)
	{
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification)
	{
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null)
		{
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose()
	{
		if (colourItemProvider != null) colourItemProvider.dispose();
		if (componentConfigurationItemProvider != null) componentConfigurationItemProvider.dispose();
		if (configurationItemProvider != null) configurationItemProvider.dispose();
		if (configurationListTypeItemProvider != null) configurationListTypeItemProvider.dispose();
		if (containerConfigurationItemProvider != null) containerConfigurationItemProvider.dispose();
		if (controlConfigurationItemProvider != null) controlConfigurationItemProvider.dispose();
		if (controlPathElementItemProvider != null) controlPathElementItemProvider.dispose();
		if (cTabFolderConfigurationItemProvider != null) cTabFolderConfigurationItemProvider.dispose();
		if (dialogConfigurationItemProvider != null) dialogConfigurationItemProvider.dispose();
		if (documentRootItemProvider != null) documentRootItemProvider.dispose();
		if (editorConfigurationItemProvider != null) editorConfigurationItemProvider.dispose();
		if (expandBarConfigurationItemProvider != null) expandBarConfigurationItemProvider.dispose();
		if (imageItemProvider != null) imageItemProvider.dispose();
		if (labelItemProvider != null) labelItemProvider.dispose();
		if (layoutItemProvider != null) layoutItemProvider.dispose();
		if (layoutDataItemProvider != null) layoutDataItemProvider.dispose();
		if (listViewerConfigurationItemProvider != null) listViewerConfigurationItemProvider.dispose();
		if (mappingViewerConfigurationItemProvider != null) mappingViewerConfigurationItemProvider.dispose();
		if (matrixViewerConfigurationItemProvider != null) matrixViewerConfigurationItemProvider.dispose();
		if (multipleListViewerConfigurationItemProvider != null) multipleListViewerConfigurationItemProvider.dispose();
		if (pagePathElementItemProvider != null) pagePathElementItemProvider.dispose();
		if (partConfigurationItemProvider != null) partConfigurationItemProvider.dispose();
		if (perspectiveConfigurationItemProvider != null) perspectiveConfigurationItemProvider.dispose();
		if (queryResultViewerConfigurationItemProvider != null) queryResultViewerConfigurationItemProvider.dispose();
		if (subPathItemProvider != null) subPathItemProvider.dispose();
		if (tabFolderConfigurationItemProvider != null) tabFolderConfigurationItemProvider.dispose();
		if (twinViewerConfigurationItemProvider != null) twinViewerConfigurationItemProvider.dispose();
		if (viewConfigurationItemProvider != null) viewConfigurationItemProvider.dispose();
		if (viewerConfigurationItemProvider != null) viewerConfigurationItemProvider.dispose();
		if (wizardConfigurationItemProvider != null) wizardConfigurationItemProvider.dispose();
		if (wizardPageConfigurationItemProvider != null) wizardPageConfigurationItemProvider.dispose();
	}

}
